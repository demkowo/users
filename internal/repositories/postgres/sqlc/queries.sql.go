// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addUserClub = `-- name: AddUserClub :exec
INSERT INTO user_clubs (user_id, club_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddUserClubParams struct {
	UserID uuid.UUID
	ClubID uuid.UUID
}

func (q *Queries) AddUserClub(ctx context.Context, arg AddUserClubParams) error {
	_, err := q.db.ExecContext(ctx, addUserClub, arg.UserID, arg.ClubID)
	return err
}

const createClub = `-- name: CreateClub :one
INSERT INTO clubs (id, name)
VALUES ($1, $2)
ON CONFLICT (name) 
DO UPDATE 
    SET name = EXCLUDED.name
RETURNING id, name
`

type CreateClubParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateClub(ctx context.Context, arg CreateClubParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, createClub, arg.ID, arg.Name)
	var i Club
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, nickname, img, country, city)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, nickname, img, country, city, created_at, updated_at, deleted
`

type CreateUserParams struct {
	ID       uuid.UUID
	Nickname string
	Img      sql.NullString
	Country  sql.NullString
	City     sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Nickname,
		arg.Img,
		arg.Country,
		arg.City,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Img,
		&i.Country,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const deleteUserClubsByUserID = `-- name: DeleteUserClubsByUserID :exec
DELETE FROM user_clubs
WHERE user_id = $1
`

func (q *Queries) DeleteUserClubsByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserClubsByUserID, userID)
	return err
}

const findUsers = `-- name: FindUsers :many
SELECT u.id, u.nickname, u.img, u.country, u.city, u.created_at, u.updated_at, u.deleted
FROM users u
WHERE u.deleted = FALSE
ORDER BY u.created_at DESC
`

func (q *Queries) FindUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.Img,
			&i.Country,
			&i.City,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubsByUserID = `-- name: GetClubsByUserID :many
SELECT c.id, c.name
FROM clubs c
JOIN user_clubs uc ON uc.club_id = c.id
WHERE uc.user_id = $1
`

func (q *Queries) GetClubsByUserID(ctx context.Context, userID uuid.UUID) ([]Club, error) {
	rows, err := q.db.QueryContext(ctx, getClubsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT u.id, u.nickname, u.img, u.country, u.city, u.created_at, u.updated_at, u.deleted
FROM users u
WHERE u.id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Img,
		&i.Country,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const getUserImgByNickname = `-- name: GetUserImgByNickname :one
SELECT img
FROM users
WHERE nickname = $1 AND deleted = FALSE
`

func (q *Queries) GetUserImgByNickname(ctx context.Context, nickname string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserImgByNickname, nickname)
	var img sql.NullString
	err := row.Scan(&img)
	return img, err
}

const listUsers = `-- name: ListUsers :many
SELECT u.id, u.nickname, u.img, u.country, u.city, u.created_at, u.updated_at, u.deleted
FROM users u
WHERE u.deleted = FALSE
ORDER BY u.created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.Img,
			&i.Country,
			&i.City,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :one
UPDATE users
SET deleted = TRUE,
    updated_at = now()
WHERE id = $1
RETURNING id, nickname, img, country, city, created_at, updated_at, deleted
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, softDeleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Img,
		&i.Country,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET country = $2,
    city = $3,
    updated_at = now()
WHERE id = $1 AND deleted = FALSE
RETURNING id, nickname, img, country, city, created_at, updated_at, deleted
`

type UpdateUserParams struct {
	ID      uuid.UUID
	Country sql.NullString
	City    sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Country, arg.City)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Img,
		&i.Country,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const updateUserImg = `-- name: UpdateUserImg :one
UPDATE users
SET img = $2,
    updated_at = now()
WHERE id = $1 AND deleted = FALSE
RETURNING id, nickname, img, country, city, created_at, updated_at, deleted
`

type UpdateUserImgParams struct {
	ID  uuid.UUID
	Img sql.NullString
}

func (q *Queries) UpdateUserImg(ctx context.Context, arg UpdateUserImgParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserImg, arg.ID, arg.Img)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Img,
		&i.Country,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}
